\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename resourcesharing.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 3.0.0.@*
@end ifinfo
@settitle Resource Sharing
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Miscellaneous
@direntry
* resourcesharing: (resourcesharing.info). One line description of project
@end direntry

@definfoenclose strong,`,'
@definfoenclose emph,`,'
@c %**end of header

@copying
@quotation
Resource Sharing Beta 1.0, Apr 10, 2020

Radhesh Sarma, Simran Sahni, Nikhil Krishna, Abhirath Singh

Copyright @copyright{} 2020, Radhesh Sarma, Simran Sahni, Nikhil Krishna, Abhirath Singh
@end quotation

@end copying

@titlepage
@title Resource Sharing
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top Resource Sharing
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{9}
@c ResourceSharing documentation master file, created by
@c sphinx-quickstart on Mon Apr  6 11:13:21 2020.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

@menu
* All about us:: 
* Models:: 
* Views:: 
* Forms:: 
* Serializers:: 
* Python Module Index:: 
* Index:: 

@end menu

@node All about us,Models,Top,Top
@anchor{modules/all-about-us doc}@anchor{a}@anchor{modules/all-about-us all-about-us}@anchor{b}@anchor{modules/all-about-us welcome-to-resourcesharing-s-documentation}@anchor{c}
@chapter All about us


We are Django developers from BITS Pilani Hyderabad Campus

@node Models,Views,All about us,Top
@anchor{modules/models doc}@anchor{d}@anchor{modules/models models}@anchor{e}@anchor{modules/models module-blog models}@anchor{1}
@chapter Models


@geindex module; blog.models

@geindex Task (class in blog.models)
@anchor{modules/models blog models Task}@anchor{f}
@deffn {Class} blog.models.Task (id, author, content, date_created)

@geindex Task.DoesNotExist
@anchor{modules/models blog models Task DoesNotExist}@anchor{10}
@deffn {Exception} DoesNotExist
@end deffn

@geindex Task.MultipleObjectsReturned
@anchor{modules/models blog models Task MultipleObjectsReturned}@anchor{11}
@deffn {Exception} MultipleObjectsReturned
@end deffn

@geindex author (blog.models.Task attribute)
@anchor{modules/models blog models Task author}@anchor{12}
@deffn {Attribute} author

Accessor to the related object on the forward side of a many-to-one or
one-to-one (via ForwardOneToOneDescriptor subclass) relation.

In the example:

@example
class Child(Model):
    parent = ForeignKey(Parent, related_name='children')
@end example

@code{Child.parent} is a @code{ForwardManyToOneDescriptor} instance.
@end deffn

@geindex author_id (blog.models.Task attribute)
@anchor{modules/models blog models Task author_id}@anchor{13}
@deffn {Attribute} author_id

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex content (blog.models.Task attribute)
@anchor{modules/models blog models Task content}@anchor{14}
@deffn {Attribute} content

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex date_created (blog.models.Task attribute)
@anchor{modules/models blog models Task date_created}@anchor{15}
@deffn {Attribute} date_created

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex get_next_by_date_created() (blog.models.Task method)
@anchor{modules/models blog models Task get_next_by_date_created}@anchor{16}
@deffn {Method} get_next_by_date_created (*, field=<django.db.models.fields.DateTimeField: date_created>, is_next=True, **kwargs)
@end deffn

@geindex get_previous_by_date_created() (blog.models.Task method)
@anchor{modules/models blog models Task get_previous_by_date_created}@anchor{17}
@deffn {Method} get_previous_by_date_created (*, field=<django.db.models.fields.DateTimeField: date_created>, is_next=False, **kwargs)
@end deffn

@geindex id (blog.models.Task attribute)
@anchor{modules/models blog models Task id}@anchor{18}
@deffn {Attribute} id

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex objects (blog.models.Task attribute)
@anchor{modules/models blog models Task objects}@anchor{19}
@deffn {Attribute} objects = <django.db.models.manager.Manager object>
@end deffn
@end deffn
@anchor{modules/models module-users models}@anchor{6}
@geindex module; users.models

@geindex CustomUser (class in users.models)
@anchor{modules/models users models CustomUser}@anchor{1a}
@deffn {Class} users.models.CustomUser (id, password, last_login, is_superuser, username, first_name, last_name, is_staff, is_active, date_joined, mobile_number, address, email)

@geindex CustomUser.DoesNotExist
@anchor{modules/models users models CustomUser DoesNotExist}@anchor{1b}
@deffn {Exception} DoesNotExist
@end deffn

@geindex CustomUser.MultipleObjectsReturned
@anchor{modules/models users models CustomUser MultipleObjectsReturned}@anchor{1c}
@deffn {Exception} MultipleObjectsReturned
@end deffn

@geindex address (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser address}@anchor{1d}
@deffn {Attribute} address

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex emailaddress_set (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser emailaddress_set}@anchor{1e}
@deffn {Attribute} emailaddress_set

Accessor to the related objects manager on the reverse side of a
many-to-one relation.

In the example:

@example
class Child(Model):
    parent = ForeignKey(Parent, related_name='children')
@end example

@code{Parent.children} is a @code{ReverseManyToOneDescriptor} instance.

Most of the implementation is delegated to a dynamically defined manager
class built by @code{create_forward_many_to_many_manager()} defined below.
@end deffn

@geindex get_next_by_date_joined() (users.models.CustomUser method)
@anchor{modules/models users models CustomUser get_next_by_date_joined}@anchor{1f}
@deffn {Method} get_next_by_date_joined (*, field=<django.db.models.fields.DateTimeField: date_joined>, is_next=True, **kwargs)
@end deffn

@geindex get_previous_by_date_joined() (users.models.CustomUser method)
@anchor{modules/models users models CustomUser get_previous_by_date_joined}@anchor{20}
@deffn {Method} get_previous_by_date_joined (*, field=<django.db.models.fields.DateTimeField: date_joined>, is_next=False, **kwargs)
@end deffn

@geindex groups (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser groups}@anchor{21}
@deffn {Attribute} groups

Accessor to the related objects manager on the forward and reverse sides of
a many-to-many relation.

In the example:

@example
class Pizza(Model):
    toppings = ManyToManyField(Topping, related_name='pizzas')
@end example

@code{Pizza.toppings} and @code{Topping.pizzas} are @code{ManyToManyDescriptor}
instances.

Most of the implementation is delegated to a dynamically defined manager
class built by @code{create_forward_many_to_many_manager()} defined below.
@end deffn

@geindex id (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser id}@anchor{22}
@deffn {Attribute} id

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex logentry_set (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser logentry_set}@anchor{23}
@deffn {Attribute} logentry_set

Accessor to the related objects manager on the reverse side of a
many-to-one relation.

In the example:

@example
class Child(Model):
    parent = ForeignKey(Parent, related_name='children')
@end example

@code{Parent.children} is a @code{ReverseManyToOneDescriptor} instance.

Most of the implementation is delegated to a dynamically defined manager
class built by @code{create_forward_many_to_many_manager()} defined below.
@end deffn

@geindex mobile_number (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser mobile_number}@anchor{24}
@deffn {Attribute} mobile_number

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex task_set (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser task_set}@anchor{25}
@deffn {Attribute} task_set

Accessor to the related objects manager on the reverse side of a
many-to-one relation.

In the example:

@example
class Child(Model):
    parent = ForeignKey(Parent, related_name='children')
@end example

@code{Parent.children} is a @code{ReverseManyToOneDescriptor} instance.

Most of the implementation is delegated to a dynamically defined manager
class built by @code{create_forward_many_to_many_manager()} defined below.
@end deffn

@geindex user_permissions (users.models.CustomUser attribute)
@anchor{modules/models users models CustomUser user_permissions}@anchor{26}
@deffn {Attribute} user_permissions

Accessor to the related objects manager on the forward and reverse sides of
a many-to-many relation.

In the example:

@example
class Pizza(Model):
    toppings = ManyToManyField(Topping, related_name='pizzas')
@end example

@code{Pizza.toppings} and @code{Topping.pizzas} are @code{ManyToManyDescriptor}
instances.

Most of the implementation is delegated to a dynamically defined manager
class built by @code{create_forward_many_to_many_manager()} defined below.
@end deffn
@end deffn

@geindex userdata (class in users.models)
@anchor{modules/models users models userdata}@anchor{27}
@deffn {Class} users.models.userdata (id, name, email, content)

@geindex userdata.DoesNotExist
@anchor{modules/models users models userdata DoesNotExist}@anchor{28}
@deffn {Exception} DoesNotExist
@end deffn

@geindex userdata.MultipleObjectsReturned
@anchor{modules/models users models userdata MultipleObjectsReturned}@anchor{29}
@deffn {Exception} MultipleObjectsReturned
@end deffn

@geindex content (users.models.userdata attribute)
@anchor{modules/models users models userdata content}@anchor{2a}
@deffn {Attribute} content

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex email (users.models.userdata attribute)
@anchor{modules/models users models userdata email}@anchor{2b}
@deffn {Attribute} email

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex id (users.models.userdata attribute)
@anchor{modules/models users models userdata id}@anchor{2c}
@deffn {Attribute} id

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex name (users.models.userdata attribute)
@anchor{modules/models users models userdata name}@anchor{2d}
@deffn {Attribute} name

A wrapper for a deferred-loading field. When the value is read from this
object the first time, the query is executed.
@end deffn

@geindex objects (users.models.userdata attribute)
@anchor{modules/models users models userdata objects}@anchor{2e}
@deffn {Attribute} objects = <django.db.models.manager.Manager object>
@end deffn
@end deffn

@node Views,Forms,Models,Top
@anchor{modules/views doc}@anchor{2f}@anchor{modules/views module-users views}@anchor{8}@anchor{modules/views views}@anchor{30}
@chapter Views


@geindex module; users.views

@geindex UserDetail (class in users.views)
@anchor{modules/views users views UserDetail}@anchor{31}
@deffn {Class} users.views.UserDetail (**kwargs)

@geindex queryset (users.views.UserDetail attribute)
@anchor{modules/views users views UserDetail queryset}@anchor{32}
@deffn {Attribute} queryset = <QuerySet [<CustomUser: radheshsarma2299@@outlook.com>]>
@end deffn

@geindex serializer_class (users.views.UserDetail attribute)
@anchor{modules/views users views UserDetail serializer_class}@anchor{33}
@deffn {Attribute} serializer_class

alias of @ref{34,,users.serializers.UserSerializer}
@end deffn
@end deffn

@geindex UserList (class in users.views)
@anchor{modules/views users views UserList}@anchor{35}
@deffn {Class} users.views.UserList (**kwargs)

@geindex queryset (users.views.UserList attribute)
@anchor{modules/views users views UserList queryset}@anchor{36}
@deffn {Attribute} queryset = <QuerySet [<CustomUser: radheshsarma2299@@outlook.com>]>
@end deffn

@geindex serializer_class (users.views.UserList attribute)
@anchor{modules/views users views UserList serializer_class}@anchor{37}
@deffn {Attribute} serializer_class

alias of @ref{34,,users.serializers.UserSerializer}
@end deffn
@end deffn
@anchor{modules/views module-blog views}@anchor{3}
@geindex module; blog.views

@geindex BlogDetail (class in blog.views)
@anchor{modules/views blog views BlogDetail}@anchor{38}
@deffn {Class} blog.views.BlogDetail (**kwargs)

@geindex queryset (blog.views.BlogDetail attribute)
@anchor{modules/views blog views BlogDetail queryset}@anchor{39}
@deffn {Attribute} queryset = <QuerySet [<Task: Demo 1>]>
@end deffn

@geindex serializer_class (blog.views.BlogDetail attribute)
@anchor{modules/views blog views BlogDetail serializer_class}@anchor{3a}
@deffn {Attribute} serializer_class

alias of @ref{3b,,blog.serializers.BlogSerializer}
@end deffn
@end deffn

@geindex BlogList (class in blog.views)
@anchor{modules/views blog views BlogList}@anchor{3c}
@deffn {Class} blog.views.BlogList (**kwargs)

@geindex queryset (blog.views.BlogList attribute)
@anchor{modules/views blog views BlogList queryset}@anchor{3d}
@deffn {Attribute} queryset = <QuerySet [<Task: Demo 1>]>
@end deffn

@geindex serializer_class (blog.views.BlogList attribute)
@anchor{modules/views blog views BlogList serializer_class}@anchor{3e}
@deffn {Attribute} serializer_class

alias of @ref{3b,,blog.serializers.BlogSerializer}
@end deffn
@end deffn

@geindex home() (in module blog.views)
@anchor{modules/views blog views home}@anchor{3f}
@deffn {Function} blog.views.home (request)
@end deffn

@geindex remove() (in module blog.views)
@anchor{modules/views blog views remove}@anchor{40}
@deffn {Function} blog.views.remove (request, item_id)
@end deffn

@geindex task_list() (in module blog.views)
@anchor{modules/views blog views task_list}@anchor{41}
@deffn {Function} blog.views.task_list (request)
@end deffn
@anchor{modules/views module-pages views}@anchor{4}
@geindex module; pages.views

@geindex AboutPageView (class in pages.views)
@anchor{modules/views pages views AboutPageView}@anchor{42}
@deffn {Class} pages.views.AboutPageView (**kwargs)

@geindex template_name (pages.views.AboutPageView attribute)
@anchor{modules/views pages views AboutPageView template_name}@anchor{43}
@deffn {Attribute} template_name = 'pages/about.html'
@end deffn
@end deffn

@geindex HomePageView (class in pages.views)
@anchor{modules/views pages views HomePageView}@anchor{44}
@deffn {Class} pages.views.HomePageView (**kwargs)

@geindex template_name (pages.views.HomePageView attribute)
@anchor{modules/views pages views HomePageView template_name}@anchor{45}
@deffn {Attribute} template_name = 'pages/home.html'
@end deffn
@end deffn

@node Forms,Serializers,Views,Top
@anchor{modules/forms doc}@anchor{46}@anchor{modules/forms forms}@anchor{47}@anchor{modules/forms module-users forms}@anchor{5}
@chapter Forms


@geindex module; users.forms

@geindex CustomUserChangeForm (class in users.forms)
@anchor{modules/forms users forms CustomUserChangeForm}@anchor{48}
@deffn {Class} users.forms.CustomUserChangeForm (*args, **kwargs)

@geindex CustomUserChangeForm.Meta (class in users.forms)
@anchor{modules/forms users forms CustomUserChangeForm Meta}@anchor{49}
@deffn {Class} Meta

@geindex fields (users.forms.CustomUserChangeForm.Meta attribute)
@anchor{modules/forms users forms CustomUserChangeForm Meta fields}@anchor{4a}
@deffn {Attribute} fields = ('email', 'username', 'mobile_number', 'address')
@end deffn

@geindex model (users.forms.CustomUserChangeForm.Meta attribute)
@anchor{modules/forms users forms CustomUserChangeForm Meta model}@anchor{4b}
@deffn {Attribute} model

alias of @ref{1a,,users.models.CustomUser}
@end deffn
@end deffn

@geindex base_fields (users.forms.CustomUserChangeForm attribute)
@anchor{modules/forms users forms CustomUserChangeForm base_fields}@anchor{4c}
@deffn {Attribute} base_fields = @{'address': <django.forms.fields.CharField object>, 'captcha': <captcha.fields.ReCaptchaField object>, 'email': <django.forms.fields.EmailField object>, 'mobile_number': <django.forms.fields.CharField object>, 'password': <django.contrib.auth.forms.ReadOnlyPasswordHashField object>, 'username': <django.forms.fields.CharField object>@}
@end deffn

@geindex declared_fields (users.forms.CustomUserChangeForm attribute)
@anchor{modules/forms users forms CustomUserChangeForm declared_fields}@anchor{4d}
@deffn {Attribute} declared_fields = @{'captcha': <captcha.fields.ReCaptchaField object>, 'password': <django.contrib.auth.forms.ReadOnlyPasswordHashField object>@}
@end deffn

@geindex media() (users.forms.CustomUserChangeForm property)
@anchor{modules/forms users forms CustomUserChangeForm media}@anchor{4e}
@deffn {Method} property media
@end deffn
@end deffn

@geindex CustomUserCreationForm (class in users.forms)
@anchor{modules/forms users forms CustomUserCreationForm}@anchor{4f}
@deffn {Class} users.forms.CustomUserCreationForm (*args, **kwargs)

@geindex CustomUserCreationForm.Meta (class in users.forms)
@anchor{modules/forms users forms CustomUserCreationForm Meta}@anchor{50}
@deffn {Class} Meta

@geindex fields (users.forms.CustomUserCreationForm.Meta attribute)
@anchor{modules/forms users forms CustomUserCreationForm Meta fields}@anchor{51}
@deffn {Attribute} fields = ('email', 'username', 'mobile_number', 'address')
@end deffn

@geindex model (users.forms.CustomUserCreationForm.Meta attribute)
@anchor{modules/forms users forms CustomUserCreationForm Meta model}@anchor{52}
@deffn {Attribute} model

alias of @ref{1a,,users.models.CustomUser}
@end deffn
@end deffn

@geindex base_fields (users.forms.CustomUserCreationForm attribute)
@anchor{modules/forms users forms CustomUserCreationForm base_fields}@anchor{53}
@deffn {Attribute} base_fields = @{'address': <django.forms.fields.CharField object>, 'captcha': <captcha.fields.ReCaptchaField object>, 'email': <django.forms.fields.EmailField object>, 'mobile_number': <django.forms.fields.CharField object>, 'password1': <django.forms.fields.CharField object>, 'password2': <django.forms.fields.CharField object>, 'username': <django.contrib.auth.forms.UsernameField object>@}
@end deffn

@geindex declared_fields (users.forms.CustomUserCreationForm attribute)
@anchor{modules/forms users forms CustomUserCreationForm declared_fields}@anchor{54}
@deffn {Attribute} declared_fields = @{'captcha': <captcha.fields.ReCaptchaField object>, 'password1': <django.forms.fields.CharField object>, 'password2': <django.forms.fields.CharField object>@}
@end deffn

@geindex media() (users.forms.CustomUserCreationForm property)
@anchor{modules/forms users forms CustomUserCreationForm media}@anchor{55}
@deffn {Method} property media
@end deffn
@end deffn

@geindex PostForm (class in users.forms)
@anchor{modules/forms users forms PostForm}@anchor{56}
@deffn {Class} users.forms.PostForm (data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=<class 'django.forms.utils.ErrorList'>, label_suffix=None, empty_permitted=False, instance=None, use_required_attribute=None, renderer=None)

@geindex PostForm.Meta (class in users.forms)
@anchor{modules/forms users forms PostForm Meta}@anchor{57}
@deffn {Class} Meta

@geindex fields (users.forms.PostForm.Meta attribute)
@anchor{modules/forms users forms PostForm Meta fields}@anchor{58}
@deffn {Attribute} fields = ('name', 'email', 'content')
@end deffn

@geindex model (users.forms.PostForm.Meta attribute)
@anchor{modules/forms users forms PostForm Meta model}@anchor{59}
@deffn {Attribute} model

alias of @ref{27,,users.models.userdata}
@end deffn
@end deffn

@geindex base_fields (users.forms.PostForm attribute)
@anchor{modules/forms users forms PostForm base_fields}@anchor{5a}
@deffn {Attribute} base_fields = @{'content': <django.forms.fields.CharField object>, 'email': <django.forms.fields.EmailField object>, 'name': <django.forms.fields.CharField object>@}
@end deffn

@geindex declared_fields (users.forms.PostForm attribute)
@anchor{modules/forms users forms PostForm declared_fields}@anchor{5b}
@deffn {Attribute} declared_fields = @{@}
@end deffn

@geindex media() (users.forms.PostForm property)
@anchor{modules/forms users forms PostForm media}@anchor{5c}
@deffn {Method} property media
@end deffn
@end deffn
@anchor{modules/forms module-blog forms}@anchor{0}
@geindex module; blog.forms

@geindex PostForm (class in blog.forms)
@anchor{modules/forms blog forms PostForm}@anchor{5d}
@deffn {Class} blog.forms.PostForm (data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=<class 'django.forms.utils.ErrorList'>, label_suffix=None, empty_permitted=False, instance=None, use_required_attribute=None, renderer=None)

@geindex PostForm.Meta (class in blog.forms)
@anchor{modules/forms blog forms PostForm Meta}@anchor{5e}
@deffn {Class} Meta

@geindex fields (blog.forms.PostForm.Meta attribute)
@anchor{modules/forms blog forms PostForm Meta fields}@anchor{5f}
@deffn {Attribute} fields = ('content',)
@end deffn

@geindex model (blog.forms.PostForm.Meta attribute)
@anchor{modules/forms blog forms PostForm Meta model}@anchor{60}
@deffn {Attribute} model

alias of @ref{f,,blog.models.Task}
@end deffn
@end deffn

@geindex base_fields (blog.forms.PostForm attribute)
@anchor{modules/forms blog forms PostForm base_fields}@anchor{61}
@deffn {Attribute} base_fields = @{'captcha': <captcha.fields.ReCaptchaField object>, 'content': <django.forms.fields.CharField object>@}
@end deffn

@geindex declared_fields (blog.forms.PostForm attribute)
@anchor{modules/forms blog forms PostForm declared_fields}@anchor{62}
@deffn {Attribute} declared_fields = @{'captcha': <captcha.fields.ReCaptchaField object>@}
@end deffn

@geindex media() (blog.forms.PostForm property)
@anchor{modules/forms blog forms PostForm media}@anchor{63}
@deffn {Method} property media
@end deffn
@end deffn

@node Serializers,Python Module Index,Forms,Top
@anchor{modules/serializers doc}@anchor{64}@anchor{modules/serializers module-blog serializers}@anchor{2}@anchor{modules/serializers serializers}@anchor{65}
@chapter Serializers


@geindex module; blog.serializers

@geindex BlogSerializer (class in blog.serializers)
@anchor{modules/serializers blog serializers BlogSerializer}@anchor{3b}
@deffn {Class} blog.serializers.BlogSerializer (instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs)

@geindex BlogSerializer.Meta (class in blog.serializers)
@anchor{modules/serializers blog serializers BlogSerializer Meta}@anchor{66}
@deffn {Class} Meta

@geindex fields (blog.serializers.BlogSerializer.Meta attribute)
@anchor{modules/serializers blog serializers BlogSerializer Meta fields}@anchor{67}
@deffn {Attribute} fields = 'content'
@end deffn

@geindex model (blog.serializers.BlogSerializer.Meta attribute)
@anchor{modules/serializers blog serializers BlogSerializer Meta model}@anchor{68}
@deffn {Attribute} model

alias of @ref{f,,blog.models.Task}
@end deffn
@end deffn
@end deffn
@anchor{modules/serializers module-users serializers}@anchor{7}
@geindex module; users.serializers

@geindex UserSerializer (class in users.serializers)
@anchor{modules/serializers users serializers UserSerializer}@anchor{34}
@deffn {Class} users.serializers.UserSerializer (instance=None, data=<class 'rest_framework.fields.empty'>, **kwargs)

@geindex UserSerializer.Meta (class in users.serializers)
@anchor{modules/serializers users serializers UserSerializer Meta}@anchor{69}
@deffn {Class} Meta

@geindex fields (users.serializers.UserSerializer.Meta attribute)
@anchor{modules/serializers users serializers UserSerializer Meta fields}@anchor{6a}
@deffn {Attribute} fields = ('mobile_number', 'address', 'email')
@end deffn

@geindex model (users.serializers.UserSerializer.Meta attribute)
@anchor{modules/serializers users serializers UserSerializer Meta model}@anchor{6b}
@deffn {Attribute} model

alias of @ref{1a,,users.models.CustomUser}
@end deffn
@end deffn
@end deffn

@node Python Module Index,Index,Serializers,Top
@unnumbered Python Module Index


@menu
* blog.forms: 0. 
* blog.models: 1. 
* blog.serializers: 2. 
* blog.views: 3. 
* pages.views: 4. 
* users.forms: 5. 
* users.models: 6. 
* users.serializers: 7. 
* users.views: 8. 
@end menu


@node Index,,Python Module Index,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
